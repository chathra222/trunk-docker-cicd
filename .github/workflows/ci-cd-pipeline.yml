name: CI/CD Pipeline

on:
  push:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sctp-my-app
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v1

      - name: 'Terraform Init'
        run: terraform init

      - name: 'Terraform Plan'
        run: terraform plan

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve  # Be cautious with auto-approve in production environments

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: sctp-my-app
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
                     NEW_FEATURE=true
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: sctp-my-app-ecs-service
          cluster: sctp-my-app-cluster
          wait-for-service-stability: true
  

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build  # Ensures the build job completes before this runs
#    steps:
#      # Steps to deploy the application (e.g., SSH into your server, pull the latest Docker image, and restart your service)
#      # The specific steps can vary depending on your hosting environment and whether you're using a service like AWS ECS, Kubernetes, etc.
#
#      - name: SSH and deploy  # Example step
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            docker pull your-dockerhub-username/your-repo:latest
#            docker stop my-running-container || true
#            docker rm my-running-container || true
#            docker run -d --name my-running-container -e NEW_FEATURE=true -p 80:5000 your-dockerhub-username/your-repo:latest
